=head2 correlate_patch_fft

=for usage

 $of = correlate_patch_fft($im0, $im1, $loc0, $of0, $size0, $patchr0, $corr_thresh);

=for ref

Cross-correlate starfield image patches to identify their offsets.
This is intended to be even faster than correlate_patch4, by tweaking some
of the convergence parameters.

You feed in two images, a location in one, a guess offset vector to the
corresponding location in the other (all in pixel coordinates, of
course), a size of a region to consider, a patch radius, and a minimum
correlation coefficient below which the fit is rejected.

The purpose of the guess offset vector is to reduce the size of the
region to consider for the initial coarse search.  If the size of the
region to consider is large enough, you can set the guess offset vector 
to 0.

You get back out a new offset 2-vector, in floating point pixel steps by which
the patch in the initial image must be translated to arrive at the corresponding
location in the final image.  The rotation angle is fit but not returned.

The sizes are radii rather than diameters, and the diameter is always rounded to 
be odd -- so to use a 25x25 pixel region, specify either 12 or 13.

=cut

use PDL::FFTW3;
use PDL::NiceSlice;
use strict;

sub correlate_patch_fft {
  my $im0 = shift();             # full image
  my $im1 = shift();             # full image
  my $loc0 = shift();            # 2-PDL: location in im0 (pixels)
  my $of0  = shift();            # 2-PDL: guess offset in pixels to location in im1
  my $sizer0 = shift();          # radius of offset ranges to consider (in pixels)
  my $patchr0 = shift();

  my( $bigsize, $smallsize, $patch0, $patch1, $corr, $maxloc, $region, $x_of, $y_of, $corrmax, $dxy, $workspace, $vec, $patchsize, $rcut, $ac, $bc, $afc, $bfc, $cutout);

  $rcut = 5;

  $patchsize = $patchr0 + $sizer0;

  $ac = $im0->range( $loc0 - $patchsize,        $patchsize*2+1, 't' )->(*2)->sever;
  $bc = $im1->range( $loc0 - $patchsize + $of0, $patchsize*2+1, 't' )->(*2,-1:0:-1,-1:0:-1)->sever;
  

  $ac->((1)) .= 0;
  $bc->((1)) .= 0;

  $ac->((0)) -= $ac->((0))->average;
  $bc->((0)) -= $bc->((0))->average;
  $bc->((0), 0:$sizer0-1, :           ) .= 0;
  $bc->((0), -$sizer0:-1, :           ) .= 0;
  $bc->((0), :,           0:$sizer0-1 ) .= 0;
  $bc->((0), :,           -$sizer0:-1 ) .= 0;

  my ($az,$bz);
  $az = $ac->((0)); $az->where(!isfinite($az)) .= 0;
  $bz = $bc->((0)); $bz->where(!isfinite($bz)) .= 0;

  $afc = fft2($ac);
  $bfc = fft2($bc);

  # Find the complex product
  my $cfc = PDL->new_from_specification($afc->dims);
  $cfc->((0)) .= $afc->((0)) * $bfc->((0))  -  $afc->((1)) * $bfc->((1));
  $cfc->((1)) .= $afc->((0)) * $bfc->((1))  +  $afc->((1)) * $bfc->((0));

  $cfc->((0),(0),(0)) .= 0;  # subtract mean

  my $cc = ifft2($cfc);
  my $c = $cc->((0),-1:0:-1,-1:0:-1);
  $c->($sizer0:-$sizer0-1, $sizer0:-$sizer0-1) .= 0;  # mask out impossible values.

  my $cmax = $c->max;
  # Find peak correlation coefficient and cut it out
  my $coords = whichND($c==$cmax)->(:,(0));
  $coords -= $c->shape * ($coords >= $c->shape/2);

  # Calculate actual peak correlation coefficient
  $cmax /= sqrt(sum($ac*$ac));
  $cmax /= sqrt(sum($bc*$bc));
  
  $cutout = $c->range($coords->(:,(0))-$rcut,[$rcut*2+1,$rcut*2+1],'p');

  # Calculate moment
  my $ndc = ndcoords($cutout) - $rcut;
  my $moment1 = ($cutout * $ndc->mv(0,-1))->sumover->sumover / $cutout->sumover->sumover;

  if(wantarray) {
  		return ($coords + $moment1,  $cmax);
  }
  return $coords + $moment1;
}