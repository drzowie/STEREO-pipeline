## -*-perl-*-
use strict;
use PDL::Slatec;
use PDL::NiceSlice;


=head2 remove_f_corona - remove the F corona from a sequence of coronagraph/HI images

=for usage

 $ret = remove_f_corona( $ims , $opt );

 # $ims should be either a hash ref containing the images to be processed as a 3-D PDL in the "RAW_CUBE" field,
 # or a list ref of images.  If the RAW_CUBE field is used, the hash should also contain a RAW_HDRS list ref.

 # $opt is an options hash.

=for ref

C<remove_f_corona> is the first step in both the hi-1 and hi-2 pipelines, and therefore it includes the process
of loading the data into memory.  (It would not be unreasonable to break this first step out in a future version).

If you supply a list ref of images or image names, then the images are regularized and a data processing hash is 
created.  The images undergo some preprocessing and filtering to reject images that appear to not be part of a 
regular sequence.   This is handled by C<read_files>.


After the initial ingestion and cleaning, the F corona subtraction is
straightforward: the images are sorted and the specified percentile
value is used as an F corona model and subtracted.  The F corona model
can be smoothed if desired.  

The percentile value calculation approximates a more complete noise
analysis of the data, which would be required to generate a "real" F
coronal model.  The problem is that a given pixel value contains
(signal + noise); sampling the minimum value of a long time series for
a given pixel as is commonly done in coronagraph data, samples both a
near-minimum value of the signal and also a near-minimum value of the
noise.  This systematically underestimates the F corona.  Selecting a
slightly-above-zero percentile offsets this slightly.

The skewed sampling of the noise distribution can be seen as fine
spatial structure in the resulting F corona model, which tracks the
motion of stars through the field; and also as a small residual signal
in the parts of the image where the F corona is brightest.  The effect
is described by DeForest, Howard & Tappin (2011).  These artifacts
can be smoothed out with the C<sm> option, which smooths the resulting
F corona model via median filtering.

Options are:

=over 3

=item USE_F_MODEL - use a precalculated F coronal model

If this is set to true, then instead of minimum-value calculation 
from the batch of images, do pixelwise linear interpolation between
precalculated F coronal models.

=item pct - percentile to use for the f corona

The percentile value to treat as the f corona.  The default 5 is appropriate for
HI-2A.

=item sm - smooth the f corona model by median filtering

This is a 2-array ref describing how much median smoothing should be
applied to the background.  The default [7,30] is appropriate for
HI-2A.

=item bin - don't use

C<bin> is left in for historical reasons but is neither needed nor
helpful in normal use.


=cut

use PDL::NiceSlice;
use PDL::Transform;
use PDL::Bad;
use Date::Parse;
use Date::Format;

sub remove_f_corona {
     local($PDL::BIGPDL) = 1;
     my $VERSION = "2.2 28-Jun-2013";
     my $i;

     # Read parameters
     my $in = shift;
     my $opt = shift;
     $opt = {} unless defined($opt);

     # Set default values for options
     $opt->{'USE_F_MODEL'} = "/net/sol/d0/stereo/F/%s/%s"  unless( exists( $opt->{'USE_F_MODEL'} ) );
     $opt->{'pct'}    = 5      unless( exists( $opt->{'pct'}  )  ); # percentile for background
     $opt->{'sm'}     = 1      unless( exists( $opt->{'sm'}   )  ); # no smoothing of background by default
     $opt->{'neg'}    = "bad"  unless( exists( $opt->{'neg'}  )  ); # how to handle negative values

     # Make sure we have a data cube in usable form
     if( ref($in) !~ m/HASH/ ) {
	 # Legacy for old calling convention - jump down into read_files unless
	 # we have a batch hash.
	 $opt->{'bin'}    = 0      unless( exists( $opt->{'bin'}  )  ); # whether to deal with multiply binned full-frame images
	 $opt->{'MASK_THRESH'} = 500 unless( exists($opt->{'MASK_THRESH'}) );
	 $opt->{'MASK_RADIUS'} = 500 unless(exists($opt->{'MASK_RADIUS'}));
	 $opt->{'MARK_BAD'} = 1 unless(exists($opt->{'MARK_BAD'}));
	 $opt->{'IMG_SIZE'} = 1024 unless(exists($opt->{'IMG_SIZE'}));
	 $opt->{'REJECT_BY_SUM'} = 0.03 unless(exists($opt->{'REJECT_BY_SUM'})); 
	 $opt->{'REJECT_BY_CROTA'} = 2 unless(exists($opt->{'REJECT_BY_CROTA'}));
	 $opt->{'CLEAN_BAD'} = 1 unless(exists($opt->{'CLEAN_BAD'}));
	 $opt->{'BAD_DIL_PIX'} = 1 unless(exists($opt->{'BAD_DIL_PIX'}));
	 $opt->{'BAD_DIL_FR'} = 0 unless(exists($opt->{'BAD_DIL_FR'}));
	 
	 $in = read_files($in,$opt);
     }

     if( $opt->{'USE_F_MODEL'} ) {
	 if( $opt->{'USE_F_MODEL'} =~ m/\%s/ ) {
	     unless(exists($opt->{'SC'})) {
		 my $obsrvtry = $in->{RAW_HDRS}->[0]->{OBSRVTRY};
		 if($obsrvtry =~ m/STEREO_([AB])/i){
		     $opt->{'SC'} = lc($1);
		 } else {
		     die "Couldn't figure spacecraft (A/B)";
		 }
	     }
	     unless(exists($opt->{'INST'})) {
		 my $inst = $in->{RAW_HDRS}->[0]->{DETECTOR};
		 if($inst =~ m/HI(\d)/) {
		     $opt->{'INST'} = "hi_$1";
		 } elsif($inst =~ m/COR(\d)/) {
		     $opt->{'INST'} = "cor$1";
		 } else {
		     die "Couldn't figure instrument (HI1/HI2/COR1/COR2)";
		 }
	     }
	 }
	 my $f_model_dir = sprintf($opt->{'USE_F_MODEL'},$opt->{'SC'},$opt->{'INST'});
	 
	 my @days = ();
	 my $t0 = str2time($in->{RAW_HDRS}->[0]->{'DATE-OBS'},"Z");
	 my $t1 = str2time($in->{RAW_HDRS}->[-1]->{'DATE-OBS'},"Z");
	 $t0 -= 48*3600;
	 $t1 += 48*3600;
	 my $t;
	 my %ff = ();
	 for ($t=$t0; $t < $t1; $t += 24*3600 ) {
	     my $pattern = $opt->{'USE_F_MODEL'}."/".time2str("%Y%m%d_",$t,'Z');
	     map { $ff{$_}=1 } (eval "<$pattern*>");
	 }
	 my @ff = sort keys %ff;
	 print "ff is \n\t".join("\n\t",@ff)."\n";
	 
	 unless(@ff) {
	     die "Couldn't find any F corona models for the range ".time2str("%Y-%m-%d",$t0,'Z')." -- ".time2str("%Y-%m-%d",$t1,'Z');
	 }
	 
	 die "FIX ME!";

	 return $in;
     }

	 

     my $ims = $in->{RAW_CUBE};

     ##############################
     # Find the index of the closest value to the desired percentile
     my $sn = $ims->dim(2) * ($opt->{'pct'}/100) + 0.5;
     my $sm = $opt->{'sm'} || 1;
     my $bk = extract_minimum($ims, {n_min => $sn, reach=> ($sm-1)/2 });

     my $out = $in;
     $out->{FBK} = $bk if($opt->{KEEP_FCORONA});
     $out->{BKSUB_CUBE} = $ims - $bk;
     undef $ims;
     undef $bk;

     unless(exists($out->{log})) {
	 $out->{log} = [];
     }

     push(@{$out->{log}},"  remove_f_corona v$VERSION");

     print "returning from remove_f_corona...\n";     
     return $out;
}
