use strict;
#-*-perl-*-

=head2 shift_to_celestial - resample from instrument to fixed-celestial coordinates.

=for usage

    shift_to_celestial( $hash, $opt );

=for ref

C<shift_to_celestial> is part of the HI-1/HI-2 pipeline.  It is used
to "freeze" the starfield by resampling the data cube to
quasicelestial coordinates.  It uses the C<D_PARAMS> field that is set
by C<get_distortion_params2>, so you need to call that first.  The
distortion parameters provide a coordinate transformation in which the 
displacement of the starfield is presumed to be exactly horizontal and
linear in time.

Each image is displaced to the temporal center of the data set as
calculated form the headers (and stored in the C<D_PARAMS> field),
using the linear time relation.

There is also some logic to dejitter images -- that is, to provide a
small secondary correction to their pointing to patch up any jitter or
systematic irregularity in the overall distortion.  The center portion
of each image is correlated with a single "master patch" from near the
center of the time range; a small jitter correction is applied to
maximize the correlation function.  For historical reasons, a (slow)
direct correlation and amoeba fit is used instead of the far faster
fit that's used by get_distortion_params2.

The resampling uses C<PDL::Transform>'s C<map> function.  You should
use either the default 'j' or 'h' as an interpolation method, to avoid
resampling artifacts.

Options are:

=over 3

=item ALIGN_DEJITTER - flag indicating whether to perform dejittering

=item ALIGN_PATCHSIZE - the size of the alignment patch, in pixels.  Scalar for square, 2-PDL for rect.

=item INTERP_METHOD - the interpolation method to use ('j' by default)

=back

=head3 HISTORY

2.1 - switch to hanning windows (rather than Gaussian ones) in interpolation
2.2 - Allow rotation as a parameter for alignment if ALIGN_DEJITTER is set; back to Gaussian windows

=cut


sub shift_to_celestial {
    my $hash = shift;
    my $opt = shift;

    my $VERSION = "2.2 13-Jun-2013";

    $opt = {} unless(defined $opt);
    $opt->{'ALIGN_DEJITTER'} = 1    unless(defined $opt->{'ALIGN_DEJITTER'});
    $opt->{'ALIGN_PATCHSIZE'} = 75  unless(defined $opt->{'ALIGN_PATCHSIZE'});
    $opt->{'INTERP_METHOD'} = 'j'   unless(defined $opt->{'INTERP_METHOD'}); # use default for science
    $opt->{'INTERP_BLUR'} = 2       unless(defined $opt->{'INTERP_BLUR'}); # use default
    $opt->{'ALIGN_PATCH_MASK'} = 1  unless(defined $opt->{'ALIGN_PATCH_MASK'});

    my $i;
    my $xr = $hash->{'D_PARAMS'}->{'xr'};
    my $yr = $hash->{'D_PARAMS'}->{'yr'};

    if(!defined($xr)) {
	die("shift_to_celestial: hash->{D_PARAMS}->{xr} not defined!");
    }
    if(!defined($yr)) {
	print "shift_to_celestial: yr not defined!  Choosing 100 - 923...\n";
	$yr = pdl(100,923);
	$hash->{'D_PARAMS'}->{'yr'} = $yr->copy;
    }

    $hash->{'CEL_CUBE'} = zeroes(float, 
				 $xr->at(1)-$xr->at(0),
				 $yr->at(1)-$yr->at(0),
				 $hash->{'BKSUB_CUBE'}->dim(2)
	);
    $hash->{'CEL_MASK'} = zeroes(byte,
				 $xr->at(1)-$xr->at(0),
				 $yr->at(1)-$yr->at(0),
				 $hash->{'BKSUB_CUBE'}->dim(2)
	);

    my $dex0 = int($hash->{UTIME}->dim(0)/2);
    my $t0 = $hash->{UTIME}->(($dex0));
    my $h0 = $hash->{RAW_HDRS}->[$dex0];
    
    our $t_nl = t_nl(@{$hash->{'D_PARAMS'}->{'tnl_params'}});

    my $x_center = ($xr->at(1)+$xr->at(0))/2;
    my $y_center = ($yr->at(1)+$yr->at(0))/2;

    my $align_patchsize = $opt->{'ALIGN_PATCHSIZE'} * pdl(1,1);
    die "ALIGN_PATCHSIZE param must be scalar or 2-PDL\n" unless($align_patchsize->nelem==2 and $align_patchsize->ndims==1);

    my @align_patchsize = $align_patchsize->list;

    ### t_patchcrop is a Transformation to move the center of the image to
    ### the center of a small alignment patch.  It is meant to work on pixel
    ### coordinates, not scientific coordinates.
    my $t_patchcrop = t_linear(pre=>[ - $x_center + $align_patchsize[0]/2,
				      - $y_center + $align_patchsize[1]/2
				      ]
	);
    
    my $blur=$opt->{INTERP_BLUR};
    my $master_patch = $hash->{'BKSUB_CUBE'}->(:,:,($dex0)) -> map(
	$t_patchcrop, 
	\@align_patchsize,
	{method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>$blur}
	);
    my $mp_mask = ($hash->{'MASK_CUBE'}->(:,:,($dex0)))->map(
	$t_patchcrop,
	\@align_patchsize, 
	{method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>$blur}
	);
    $mp_mask .= ($mp_mask==1);

    
    for $i(0..$hash->{'BKSUB_CUBE'}->dim(2)-1) {
	print "Resampling image $i of ".$hash->{'BKSUB_CUBE'}->dim(2)." ";

	my $delta_t =  ($t0 - $hash->{'UTIME'}->(($i)) ) / 3600 /24;
	my $orbital_rotation = $hash->{'D_PARAMS'}->{'ospeed'} * $delta_t;
	print "by $delta_t days ($orbital_rotation degrees)...\n";
	my $t_o = t_linear(pre=> [ $orbital_rotation, 0]);
	my $corr;
	my $nudge;

	if($opt->{ALIGN_DEJITTER}) {
	    ### Zero out busted places! (try to solve "corelation is nan" problem)
	    print "mz...";
#	    $hash->{'MASK_CUBE'}->(:,:,($i))->where(!isfinite($hash->{'BKSUB_CUBE'}->(:,:,($i)))) .= 0;
#	    $hash->{'BKSUB_CUBE'}->(:,:,($i))->where($hash->{'MASK_CUBE'}->(:,:,($i))==0) .= 0;

	    my $heur = sub {
		my $vec = shift;
		my $dx = $vec->(0:1);
		my $rot = $vec->at(2);

		my $patch_cen = $align_patchsize/2;
		# Offset by dx and rotate by $rot about the center of the patch
		my $t_z = t_linear(pre=>$dx - $patch_cen, post=>$patch_cen, rot=>$rot);

		my $newpatch = $hash->{'BKSUB_CUBE'}->(:,:,($i))->map(
		    $t_z x $t_patchcrop x !$t_nl x $t_o x $t_nl,
		    \@align_patchsize,
		    {method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>$blur}
		    );
		my $np_mask =  $hash->{'MASK_CUBE'}->(:,:,($i))->float->map(
		    $t_z x $t_patchcrop x !$t_nl x $t_o x $t_nl,
		    \@align_patchsize,
		    {method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>$blur}
		    );

		$np_mask .= ($np_mask==1);
		my $ok = ($np_mask & $mp_mask);
		my $p0 = $master_patch->where($ok);
		my $p1 = $newpatch->where($ok);

		my $p0av = $p0->average;
		my $p0p = $p0 - $p0av->(*1);
		my $p0sd = ($p0p * $p0p)->average->sqrt;
		
		my $p1av = $p1->average;
		my $p1p = $p1 - $p1av->(*1);
		my $p1sd = ($p1p * $p1p)->average->sqrt;
		$corr = ($p0p * $p1p)->average / $p0sd / $p1sd;

		return 1.0 - $corr;
	    };

	    print "Finding nudge...";

	    $nudge = amoeba($heur, pdl(-0.05,-0.05,-0.05), 0.1, 1e-3, 1e-5, 1e3);
	    print "nudge is $nudge, corr is $corr.  ";
	    if($corr<0.95){
		print "Correlation sucks. Ignoring nudge\n";
		$nudge = pdl(0,0);
	    }
	} else {
	    $nudge = pdl(0,0);
	}
	my $t_crop = t_linear(pre=>[ - $xr->at(0) + $nudge->at(0), -$yr->at(0) + $nudge->at(1)]);
	    
	print "data...";

	$hash->{'BKSUB_CUBE'}->badflag(1);
	$hash->{'CEL_CUBE'}->badflag(1);

	$hash->{'CEL_CUBE'}->(:,:,($i)) .= 
	    $hash->{'BKSUB_CUBE'}->(:,:,($i))->map(
		$t_crop x !$t_nl x $t_o x $t_nl, 
		[$xr->at(1)-$xr->at(0), $yr->at(1)-$yr->at(0)], 
		{method=>$opt->{'INTERP_METHOD'}, pix=>1,blur=>$blur}
	    );
	    
	print "mask...";
	$hash->{'CEL_MASK'}->(:,:,($i)) .=
	    ( $hash->{'MASK_CUBE'}->(:,:,($i))->double->map(
		$t_crop x !$t_nl x $t_o x $t_nl,
		[$xr->at(1)-$xr->at(0),$yr->at(1)-$yr->at(0)],
		{method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>$blur}
	      )>(1 - 1e-15)); # little bit of slop for roundoff...
	    
	print (($hash->{CEL_MASK}->(:,:,$i)->sum)." OK points\n");

    }

    push(@{$hash->{log}}, "  shift_to_celestial v$VERSION");    
    return $hash;
}
